#+TITLE: Exercises for Chapter 2
* EXERCISES SECTION 2.1.1
** DONE Exercise 2.1
What are the differences between ~int~, ~long~, ~long long~, and ~short~?
Between an unsigned and a signed type? Between a float and a double?

Speaking of the minimum size, ~short~ <= ~int~ <= ~long~ <= ~long long~
signed: with +/-; unsigned: without +/-
~float~ is less precise than ~double~
** DONE Exercise 2.2
To calculate a mortgage payment, what types would you use for the rate,
principal, and payment? Explain why you selected each type.

+ rate: ~float~ is enough for the rate, but ~double~ is also fine
+ principle: ~float~ for the point part
+ payment: ~int~ mostly likely it will be
** DONE Exercise 2.3
What output will the following code produce?
#+BEGIN_SRC cpp
unsigned u = 10, u2 = 42;
std::cout << u2 - u << std::endl;
std::cout << u - u2 << std::endl;
int i = 10, i2 = 42;
std::cout << i2 - i << std::endl;
std::cout << i - i2 << std::endl;
std::cout << i - u << std::endl;
std::cout << u - i << std::endl;

// on my machine
// 32
// 4294967264
// 32
// -32
// 0
// 0
#+END_SRC
** DONE Exercise 2.4
Write a program to check whether your predictions were correct. If not, study this section until you understand what the problem is.
See [[file:./ex2_3.cpp][ex2_3.cpp]]
* EXERCISES SECTION 2.1.3
** TODO Exercise 2.5
Determine the type of each of the following literals. Explain the differ-
ences among the literals in each of the four examples:
#+BEGIN_EXAMPLE
(a) ’a’,L’a’,"a",L"a"
(b) 10,10u,10L,10uL,012,0xC
(c) 3.14,3.14f,3.14L
(d) 10,10u,10.,10e-2
#+END_EXAMPLE
** DONE Exercise 2.6
What, if any, are the differences between the following definitions:
#+BEGIN_SRC cpp
int month = 9, day = 7; // integer literals, signed
int month = 09, day = 07; // 0 marks `09` should be an octal but 9 is invalid
// Of course since in octal 8 is the highest digit, thus causing compilation error

ex2_6.cpp:5:15: error: invalid digit "9" in octal constant
    5 |   int month = 09, day = 07;
      |               ^~
ex2_6.cpp: In function ‘int main()’:
ex2_6.cpp:7:16: error: ‘day’ was not declared in this scope
    7 |   std::cout << day << std::endl;
      |                ^~~
#+END_SRC
** TODO Exercise 2.7
What values do these literals represent? What type does each have?
#+BEGIN_EXAMPLE
(a) "Who goes with F\145rgus?\012"
(b) 3.14e1L
(c) 1024f
(d) 3.14L
#+END_EXAMPLE
** DONE Exercise 2.8
Using escape sequences, write a program to print ~2M~ followed by a new-
line. Modify the program to print ~2~, then a tab, then an ~M~, followed by a newline.
* EXERCISES SECTION 2.2.2
** DONE Exercise 2.11
Explain whether each of the following is a declaration or a definition:
#+BEGIN_EXAMPLE
(a) extern int ix = 1024; // definition
(b) int iy;
// definition and the variable is initialized as zero if defined outside any function
// or is uninitialized if inside a function
(c) extern int iz; // declarition
#+END_EXAMPLE
* EXERCISES SECTION 2.3.2
** DONE Exercise 2.18
Write code to change the value of a pointer. Write code to change the value to which the pointer points.
See [[file:./ex2_18.cpp][ex2_18.cpp]]
** DONE Exercise 2.19
Explain the key differences between pointers and references.

Pointers are objects. They have their own addresses and they can have references.
References in contrast are not objects. They are just aliases of some objects and they can't be referred to.
** DONE Exercise 2.20
What does the following program do?
#+BEGIN_SRC cpp
int i = 42; // create a varibale of type int and initialize it to 42
int *p1 = &i; // create a pointer of type int and points to int i
*p1 = *p1 * *p1; // change the val of i using pointer dereference
// the new val of i would be the square of its original val
#+END_SRC
** DONE Exercise 2.21
Explain each of the following definitions. Indicate whether any are illegal and, if so, why.
#+BEGIN_SRC cpp
int i = 0;

double *dp = &i; // pointer should have the same type as the var it points to
int *ip = i; // illegal, pointer should points to address not the val
int *p = &i; // legal
#+END_SRC
** DONE Exercise 2.22
Assuming ~p~ is a pointer to ~int~, explain the following code:
#+BEGIN_SRC cpp
if (p) // if pointer is not NULL
if (*p) // if the value to which the pointer points is not zero
#+END_SRC
** DONE Exercise 2.23
Given a pointer ~p~, can you determine whether ~p~ points to a valid object?
If so, how? If not, why not?
#+BEGIN_SRC cpp
// determine if a pointer is valid
if (p == NULL) // points to nothing or
if (*p == 0) // points to zero
if (*p) // points to anythig that is not zero
#+END_SRC
** DONE Exercise 2.24
Why is the initialization of p legal but that of lp illegal?
#+BEGIN_SRC cpp
inti=42; void*p=&i; long*lp=&i;
#+END_SRC
#+BEGIN_QUOTE
The type ~void*~ is a special pointer type that can hold the address of any object. Like any other pointer, a void* pointer holds an address, but the type of the object at that address is unknown:
#+END_QUOTE
* EXERCISES SECTION 2.3.3
** DONE Exercise 2.25
Determine the types and values of each of the following variables.
#+BEGIN_SRC cpp
int* ip, i, &r=i;
// ip is a pointer to int, i an int, r a reference to i
int i, *ip=0;
// i is an int, ip is a pointer to 0
int* ip, ip2;
// ip is a pointer to in, ip2 is an int
#+END_SRC
