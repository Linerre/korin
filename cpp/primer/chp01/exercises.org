#+TITLE: Exercises Chapter - 1
* EXERCISES SECTION 1.2
** Exercise 1.3
Write a program to print Hello, World on the standard output.
#+BEGIN_SRC cpp
#include <iostream>

int main()

  std::cout << "Hello World" << std::endl;
  return 0;
}

#+END_SRC
** Exercise 1.4
Our program used the addition operator, +, to add two numbers. Write a program that uses the multiplication operator, *, to print the product instead.
#+BEGIN_SRC cpp
#include <iostream>

int main()
{
  std::cout << "Enter two numbers:" << std::endl;
  int v1 = 0, v2 = 0;
  std::cin >> v1 >> v2;
  std::cout << "The product of " << v1 << " and " << v2
            << " is " << v1 * v2 << std::endl;
  return 0;
}
#+END_SRC
** Exercise 1.5
We wrote the output in one large statement. Rewrite the program to use
a separate statement to print each operand.
#+BEGIN_SRC cpp
#include <iostream>

int main()
{
  std::cout << "Enter two numbers:" << std::endl;
  int v1 = 0, v2 = 0;
  std::cin >> v1;
  std::cin >> v2;

  std::cout << "The product of ";
  std::out << v1;
  std::out << " and ";
  std::out << v2;
  std::out << " is ";
  std::out << v1 * v2;
  std::out << std::endl;
  return 0;
}
#+END_SRC

** Exercise 1.6
Explain whether the following program fragment is legal.
#+BEGIN_SRC cpp
std::cout << "The sum of " << v1;
          << " and " << v2;
          << " is " << v1 + v2 << std::endl;
#+END_SRC
If the program is legal, what does it do? If the program is not legal, why not? How would you fix it?

It is not legal. =;= terminates a statement so that line 2 and line 3 are not legal and will send the stream to nowhere. To fix it, simply add ~std::cout~ to the beginning of line 2 and line 3:
#+BEGIN_SRC cpp
std::cout << "The sum of " << v1;
std::cout << " and " << v2;
std::cout << " is " << v1 + v2 << std::endl;
#+END_SRC
* EXERCISES SECTION 1.3
** Exercise 1.7
Compile a program that has incorrectly nested comments.
#+BEGIN_SRC cpp
// incorrctly nested comments
#include <iostream>
int main()
{
  /* Incorrectly nested /*   */
   * multiline comments
   */
}
#+END_SRC
I got:
#+BEGIN_EXAMPLE
ex1_7.cpp: In function ‘int main()’:
ex1_7.cpp:5:6: error: ‘multiline’ was not declared in this scope
    5 |    * multiline comments
      |      ^~~~~~~~~
#+END_EXAMPLE
** Exercise 1.8
Indicate which, if any, of the following output statements are legal:
#+BEGIN_SRC cpp
std::cout << "/*";
std::cout << "*/";
std::cout << /* "*/" */;
std::cout << /* "*/" /* "/*" */;
#+END_SRC
After you’ve predicted what will happen, test your answers by compiling a program with each of these statements. Correct any errors you encounter.

I think the 3rd will cause error because it is nested. The 4th will also be problematic because the  output  =/*=.

Leaving only the 3rd in place will get
#+BEGIN_EXAMPLE
ex1_8.cpp:7:22: warning: missing terminating " character
    7 |   std::cout << /* "*/" */;
      |                      ^
ex1_8.cpp:7:22: error: missing terminating " character
    7 |   std::cout << /* "*/" */;
      |                      ^~~~~
ex1_8.cpp: In function ‘int main()’:
ex1_8.cpp:10:3: error: expected primary-expression before ‘return’
   10 |   return 0;
      |   ^~~~~~
#+END_EXAMPLE
* EXERCISES SECTION 1.4.1
** Exercise 1.9
Write a program that uses a while to sum the numbers from 50 to 100.
#+BEGIN_SRC cpp
#include <iostream>

int main()
{
  int sum = 0;
  int val = 50;
  while ( val <=100 ) {
    val += 1;
    sum += val;
  }
  std::cout << "The sum of range 55-100 is "
            << sum << std::endl;
  // The sum of range 55-100 is 3876
  return 0;
}

#+END_SRC
** Exercise 1.10
In addition to the ++ operator that adds 1 to its operand, there is a decrement operator (--) that subtracts 1. Use the decrement operator to write a while that prints the numbers from ten down to zero.
#+BEGIN_SRC cpp
#include <iostream>

int main()
{
  int val = 10;
  while ( val >= 0 ) {
    std::cout << "The value of val now is "
              << val << std::endl;
    --val;
  }
  return 0;
}
#+END_SRC
** Exercise 1.11
Write a program that prompts the user for two integers. Print each number in the range specified by those two integers.
#+BEGIN_SRC cpp
#include <iostream>

int main()
{
  std::cout << "Enter two numbers separated by space: ";
  int start = 0, end =0;
  std::cin >> start >> end;

  std::cout << "Now the numbers between "
            << start << " and " << end
            << " (both inclusive) will be printed below:" << std::endl;
  while (start <= end) {
    std::cout << "The number in this turn is "
              << start << std::endl;
    ++start;
  }
  return 0;
}
#+END_SRC
* EXERCISES SECTION 1.4.2
** Exercise 1.12
What does the following for loop do? What is the final value of sum?
#+BEGIN_SRC cpp
int sum = 0;
   for (int i = -100; i <= 100; ++i)
sum += i;
#+END_SRC
The code keeps adding value ~i~ to ~sum~ until ~i~ is greater than 100.
** Exercise 1.13
Rewrite the first two exercises from § 1.4.1 (p. 13) using for loops.
*** rewrite ex 1.9
#+BEGIN_SRC cpp
// rewrite exercise 1.9
#include <iostream>

int main()
{
  int sum = 0;
  for (int i = 50; i <= 100; ++i)
    sum += i;

  std::cout << "The sum of 50 to 100 inclusive is "
            << sum << std::endl;
}
#+END_SRC
*** rewrite ex 1.10
#+BEGIN_SRC cpp
#include <iostream>
int main()
{
  for (int val = 10; val >= 0, --val) {
    std:cout << "val is now " << val << std::endl;
  }
  return 0;
}
#+END_SRC
** Exercise 1.14
Compare and contrast the loops that used a for with those using a while. Are there advantages or disadvantages to using either form?

~for~ loops make it convenient to intro a temporary variable as a counter or index.
~while~ loops serve well when there is no need to intro any new temporary or auxiliary variables.
** Exercise 1.15
Write programs that contain the common errors discussed in the box on page 16. Familiarize yourself with the messages the compiler generates.
Ahhhh, I've written too much such sh*t and the compiler yelled at me for hundreds of times T_
* EXERCISES SECTION 1.4.3
** Exercise 1.16
Write your own version of a program that prints the sum of a set of integers read from cin.
* EXERCISES SECTION 1.4.4 - 5
** Exercise 1.17
What happens in the program presented in this section if the input val- ues are all equal? What if there are no duplicated values? See below 1.18
** Exercise 1.18
Compile and run the program from this section giving it only equal values as input. Run it again giving it values in which no number is repeated.
#+BEGIN_SRC shell
# input same numbers
./eg1_16_1.out
100 100 100 100 # Ctrl-D
# 100 occurs 4 times

# input with different numbers each time
10 20 30 40
# 10 occurs 1 times
# 20 occurs 1 times
# 30 occurs 1 times
# 40 occurs 1 times
#+END_SRC
** Exercise 1.19
Revise the program you wrote for the exercises in § 1.4.1 (p. 13) that printed a range of numbers so that it handles input in which the first number is smaller than the second.
#+BEGIN_SRC cpp
#include <iostream>

int main()
{
  int sum = 0;
  int val = 0;

  std::cout << "Enter random integers " << std::endl;
  std::cout << "But the latter should be bigger than the former. " << std::endl;
  std::cout << "Press Enter and then Ctrl-D to terminate: " << std::endl;

  if (std::cin >> val) {//Make sure we have invalid data to process
    int curr_val = val;
    std::cout << "The first number is " << curr_val << std::endl;

    while (std::cin >> val) {
      if (val > curr_val) {
        std::cout << "The number following is " << val
                  << " and it is bigger than "<< curr_val << std::endl;
      } else {
        std::cout << "Number " << val << " is smaller than its precedor "
                  << curr_val
                  << " Make sure the next number is bigger than " << val
                  << std::endl;
        curr_val = val;
      }
      // update curr_val for the next loop
      curr_val = val;
    }
  }
  return 0;
}
#+END_SRC
* EXERCISES SECTION 1.5.1
** Exercise 1.20
http://www.informit.com/title/0321714113 contains a copy of Sales_item.h in the Chapter 1 code directory. Copy that file to your working directory. Use it to write a program that reads a set of book sales transactions, writing each transaction to the standard output.

I don't have access to the header file, so the below code hasn't been tested
#+BEGIN_SRC cpp
#include <iostream>
#include "Sales_item.h"

int main()
{
  std::cout << "Enter an item, one each line, following the below order: "
            << std::endl;
  std::cout << "ISBN, number of copies sold sales, price." << std::endl;
  std::cout << "Press Enter to start inputing a new item." << std::endl;

  Sales_item my_item;

  while(std::cin >> my_item) {
    std::cout << my_item
  }

  std::cout << "See you next time!" << std::endl;
  return 0;
}
#+END_SRC
** Exercise 1.21
Write a program that reads two Sales_item objects that have the same ISBN and produces their sum.

I don't think the exercise expects me to use member functions or other types than ~int~ (which is the only type introduced and used in this chapter). The code should be exactly the same as that in Section 1.5 (p.21). That is, we assume the user inputs exactly the same ISBN twice.
#+BEGIN_SRC cpp
#include <iostream>
    #include "Sales_item.h"
int main() {
 Sales_item item1, item2;
 std::cin >> item1 >> item2;
 // read a pair of transactions
 std::cout << item1 + item2 << std::endl; // print their sum
 return 0;
}
#+END_SRC
** Exercise 1.22
Write a program that reads several transactions for the same ISBN. Write the sum of all the transactions that were read.

As I understand it, this is the code shown on page 22, with some minor tweaks:
#+BEGIN_SRC cpp
#include <iostream>
#include "Sales_item.h"
int main() {
  std::count << "Please enter the transction: " << std::endl;

  Sales_item curr_item, next_item;
  if (std::cin >> curr_item) {// Make sure we have data
    while (std::cin >> next_item) {
      // let's assume the item ISBN are always the same
      curr_item += next_item;
    }
  } else {
    std::cerr << "No data?" << std::endl;
    return -1;
  }

  std::cout << curr_item << std::endl; // print their sum
  return 0;
}
#+END_SRC
* EXERCISES SECTION 1.5.2
** Exercise 1.23
Write a program that reads several transactions and counts how many transactions occur for each ISBN.

The ~std::cout~ in the ~else~ branch is a great way to handle change. Pay attention to the example code on p.17, section 1.4.4, as well as the last example in section 1.5.2.
#+BEGIN_SRC cpp
#include <iostream>
#include "Sales_item.h"
int main()
{
  Sales_item item1, item2;
  int cnt = 0;
  if (std::cin >> item1) {
    while (std::cin >> item2) {
      if (item1.isbn() == item2.isbn()) {
        ++cnt;
      } else {
        // Learn this way of handling change
        std::cout << item1.isbn() << "occurs "
                  << cnt << " times" << std::endl;
        item1 = item2;
        cnt = 1;
      }
    }
    std::cout << item1.isbn() << "occurs"
              << cnt << " times." << std::endl;
  } else {
    std:cerr << "No data? " << std:endl;
    return -1;
  }
  return 0;
}
#+END_SRC
