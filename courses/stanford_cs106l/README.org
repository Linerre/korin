#+TITLE: Stanford CS106L

* Info
A good course for learning intermediate C++ in my opinion.  Indeed, many CS courses of Stanford use C++.

- site (current version): https://web.stanford.edu/class/archive/cs/cs106l/cs106l.1234/index.html
- Reader: https://web.stanford.edu/class/archive/cs/cs106l/cs106l.1234/full_course_reader.pdf
  The chapter 8 on C string is missing?
- handouts (old): https://web.stanford.edu/class/archive/cs/cs106l/cs106l.1192/handouts/
- lecturer: https://www.youtube.com/@averywang9289 (he posted the lecture videos)
- Assignment1: https://web.stanford.edu/class/archive/cs/cs106l/cs106l.1234/assignment2.html
   #+BEGIN_QUOTE
   NOTE: Yes, the link says cs106L-assignment2 even for assignment 1. This quarter we renumbered the assignments but didn't move where the code lives.
   #+END_QUOTE


* Directories
1. ~playground~: code snippet that I'd like to try out when reading the book.
2. ~practice~: code for some (not all) *Practice Problems* at the end of each section of the [[https://web.stanford.edu/class/archive/cs/cs106l/cs106l.1234/full_course_reader.pdf][Full Course Reader]], grouped by chapter.
3. ~handouts~: PDF handouts of the course


* Schedule
| Lec | Topic                                          |       Date |
|-----+------------------------------------------------+------------|
|   1 | Welcome                                        | 2024-01-15 |
|   2 | Types and Structs                              | 2024-01-15 |
|   3 | Initialization and References                  | 2024-01-15 |
|   4 | Streams                                        | 2024-01-15 |
|   5 | Containers                                     | 2024-01-16 |
|   6 | Iterators and Pointers                         |            |
|   7 | Classes                                        |            |
|   8 | Template Classes and Const Correctness         |            |
|   9 | Template Functions                             |            |
|  10 | Functions and Lambdas                          |            |
|  11 | Operators                                      |            |
|  12 | Special Member Functions                       |            |
|  13 | Move Semantics                                 |            |
|  14 | std::optional and Type Safety                  |            |
|  15 | RAII, Smart Pointers and Building C++ Projects |            |


* Useful fragments

** Chapter 3
#+PAGE: 34
#+BEGIN_QUOTE
If you try to read stream data of one type into a variable of another type, rather than crashing the program or filling the variable with garbage data, the stream fails by entering an error state and the value of the variable will not change. Once the stream is in this error state, /any subsequent read or write operations will automatically and silently fail/, which can be a serious problem.

Note that ~clear~ won't skip over the input that put the stream into an error state; you will need to extract this input manually.
#+END_QUOTE

#+PAGE: 36
#+BEGIN_QUOTE
The streams library is configured so that most stream operations, including stream insertion and extraction, yield a
nonzero value if the operation succeeds and zero otherwise.

In any circumstance where a boolean value is expected, it is legal to place a stream object or a stream read/write operation.
#+END_QUOTE

#+PAGE: 36
A useful shorthand
#+BEGIN_SRC cpp
while (true) {
  // init vars
  if (/* condition fails */) break;

  /* processing stuff */
 }
#+END_SRC

** Chapter 4
Two types of syntax for ~#define~ directive:
#+BEGIN_SRC cpp
// 1st
#define phrase replacement

// 2nd (marco); also inline function
#define macroname(parameter1, parameter2, ... , parameterN) macro-body
//               ^ no whitepsace here
#+END_SRC

Read the following:
1. ~#define~ directive and Macro in Chapter 4 of the reader
2. #define directive (C/C++) from Microsoft: https://learn.microsoft.com/en-us/cpp/preprocessor/hash-define-directive-c-cpp
